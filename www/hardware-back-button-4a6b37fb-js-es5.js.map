{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/hardware-back-button-4a6b37fb.js"],"names":["blockHardwareBackButton","document","addEventListener","startHardwareBackButton","doc","busy","index","handlers","ev","CustomEvent","bubbles","detail","register","priority","handler","push","id","dispatchEvent","executeAction","handlerRegister","result","processHandlers","console","error","length","selectedHandler","Number","MIN_SAFE_INTEGER","undefined","forEach","filter","then","OVERLAY_BACK_BUTTON_PRIORITY","MENU_BACK_BUTTON_PRIORITY"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpCC,gBAAQ,CAACC,gBAAT,CAA0B,YAA1B,EAAwC,YAAM,CAAG,CAAjD,EADoC,CACgB;AACrD,OAFD;;AAGA,UAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpC,YAAMC,GAAG,GAAGH,QAAZ;AACA,YAAII,IAAI,GAAG,KAAX;AACAD,WAAG,CAACF,gBAAJ,CAAqB,YAArB,EAAmC,YAAM;AACvC,cAAIG,IAAJ,EAAU;AACR;AACD;;AACD,cAAIC,KAAK,GAAG,CAAZ;AACA,cAAIC,QAAQ,GAAG,EAAf;AACA,cAAMC,EAAE,GAAG,IAAIC,WAAJ,CAAgB,eAAhB,EAAiC;AAC1CC,mBAAO,EAAE,KADiC;AAE1CC,kBAAM,EAAE;AACNC,sBADM,oBACGC,QADH,EACaC,OADb,EACsB;AAC1BP,wBAAQ,CAACQ,IAAT,CAAc;AAAEF,0BAAQ,EAARA,QAAF;AAAYC,yBAAO,EAAPA,OAAZ;AAAqBE,oBAAE,EAAEV,KAAK;AAA9B,iBAAd;AACD;AAHK;AAFkC,WAAjC,CAAX;AAQAF,aAAG,CAACa,aAAJ,CAAkBT,EAAlB;;AACA,cAAMU,aAAa;AAAA,+EAAG,iBAAOC,eAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,4BAEdA,eAAe,IAAIA,eAAe,CAACL,OAFrB;AAAA;AAAA;AAAA;;AAGVM,4BAHU,GAGDD,eAAe,CAACL,OAAhB,CAAwBO,eAAxB,CAHC;;AAAA,4BAIZD,MAAM,IAAI,IAJE;AAAA;AAAA;AAAA;;AAAA;AAAA,6BAKRA,MALQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUlBE,6BAAO,CAACC,KAAR;;AAVkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAH;;AAAA,4BAAbL,aAAa;AAAA;AAAA;AAAA,aAAnB;;AAaA,cAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,gBAAId,QAAQ,CAACiB,MAAT,GAAkB,CAAtB,EAAyB;AACvB,kBAAIC,eAAe,GAAG;AACpBZ,wBAAQ,EAAEa,MAAM,CAACC,gBADG;AAEpBb,uBAAO,EAAE;AAAA,yBAAMc,SAAN;AAAA,iBAFW;AAGpBZ,kBAAE,EAAE,CAAC;AAHe,eAAtB;AAKAT,sBAAQ,CAACsB,OAAT,CAAiB,UAAAf,OAAO,EAAI;AAC1B,oBAAIA,OAAO,CAACD,QAAR,IAAoBY,eAAe,CAACZ,QAAxC,EAAkD;AAChDY,iCAAe,GAAGX,OAAlB;AACD;AACF,eAJD;AAKAT,kBAAI,GAAG,IAAP;AACAE,sBAAQ,GAAGA,QAAQ,CAACuB,MAAT,CAAgB,UAAAhB,OAAO;AAAA,uBAAIA,OAAO,CAACE,EAAR,KAAeS,eAAe,CAACT,EAAnC;AAAA,eAAvB,CAAX;AACAE,2BAAa,CAACO,eAAD,CAAb,CAA+BM,IAA/B,CAAoC;AAAA,uBAAM1B,IAAI,GAAG,KAAb;AAAA,eAApC;AACD;AACF,WAhBD;;AAiBAgB,yBAAe;AAChB,SA9CD;AA+CD,OAlDD;;AAmDA,UAAMW,4BAA4B,GAAG,GAArC;AACA,UAAMC,yBAAyB,GAAG,EAAlC,C,CAAsC","file":"hardware-back-button-4a6b37fb-js-es5.js","sourcesContent":["/**\n * When hardwareBackButton: false in config,\n * we need to make sure we also block the default\n * webview behavior. If we don't then it will be\n * possible for users to navigate backward while\n * an overlay is still open. Additionally, it will\n * give the appearance that the hardwareBackButton\n * config is not working as the page transition\n * will still happen.\n */\nconst blockHardwareBackButton = () => {\n  document.addEventListener('backbutton', () => { }); // tslint:disable-line\n};\nconst startHardwareBackButton = () => {\n  const doc = document;\n  let busy = false;\n  doc.addEventListener('backbutton', () => {\n    if (busy) {\n      return;\n    }\n    let index = 0;\n    let handlers = [];\n    const ev = new CustomEvent('ionBackButton', {\n      bubbles: false,\n      detail: {\n        register(priority, handler) {\n          handlers.push({ priority, handler, id: index++ });\n        }\n      }\n    });\n    doc.dispatchEvent(ev);\n    const executeAction = async (handlerRegister) => {\n      try {\n        if (handlerRegister && handlerRegister.handler) {\n          const result = handlerRegister.handler(processHandlers);\n          if (result != null) {\n            await result;\n          }\n        }\n      }\n      catch (e) {\n        console.error(e);\n      }\n    };\n    const processHandlers = () => {\n      if (handlers.length > 0) {\n        let selectedHandler = {\n          priority: Number.MIN_SAFE_INTEGER,\n          handler: () => undefined,\n          id: -1\n        };\n        handlers.forEach(handler => {\n          if (handler.priority >= selectedHandler.priority) {\n            selectedHandler = handler;\n          }\n        });\n        busy = true;\n        handlers = handlers.filter(handler => handler.id !== selectedHandler.id);\n        executeAction(selectedHandler).then(() => busy = false);\n      }\n    };\n    processHandlers();\n  });\n};\nconst OVERLAY_BACK_BUTTON_PRIORITY = 100;\nconst MENU_BACK_BUTTON_PRIORITY = 99; // 1 less than overlay priority since menu is displayed behind overlays\n\nexport { MENU_BACK_BUTTON_PRIORITY, OVERLAY_BACK_BUTTON_PRIORITY, blockHardwareBackButton, startHardwareBackButton };\n"]}